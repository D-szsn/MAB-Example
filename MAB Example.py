   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Definimos las tasas de éxito de cada anuncio (probabilidad de clic)\n",
    "conversion_rates = [0.1, 0.3, 0.5]  # Anuncios A1, A2, A3\n",
    "num_arms = len(conversion_rates)\n",
    "num_trials = 1000  # Número de intentos\n",
    "epsilon = 0.1  # Probabilidad de exploración\n",
    "\n",
    "# Inicializamos las estimaciones de recompensa\n",
    "Q_values = np.zeros(num_arms)  \n",
    "action_counts = np.zeros(num_arms)  \n",
    "\n",
    "# Historial de recompensas\n",
    "reward_history = []\n",
    "\n",
    "for t in range(num_trials):\n",
    "    # Selección de acción (Exploración vs. Explotación)\n",
    "    if np.random.rand() < epsilon:\n",
    "        action = np.random.randint(num_arms)  # Exploramos una opción aleatoria\n",
    "    else:\n",
    "        action = np.argmax(Q_values)  # Explotamos la mejor opción actual\n",
    "\n",
    "    # Generamos la recompensa (1 con probabilidad de éxito, 0 en caso contrario)\n",
    "    reward = np.random.rand() < conversion_rates[action]\n",
    "    \n",
    "    # Actualizamos las estadísticas\n",
    "    action_counts[action] += 1\n",
    "    Q_values[action] += (reward - Q_values[action]) / action_counts[action]\n",
    "    reward_history.append(reward)\n",
    "\n",
    "# Visualizamos resultados\n",
    "plt.plot(np.cumsum(reward_history) / (np.arange(num_trials) + 1))\n",
    "plt.xlabel(\"Número de intentos\")\n",
    "plt.ylabel(\"Recompensa media acumulada\")\n",
    "plt.title(\"Estrategia ε-greedy en un problema de bandidos multi-brazos\")\n",
    "plt.show()"
   ]
